import textwrap
from termcolor import colored # Para dar uma dar uma corzinha √† +

def message_alert (message):
    return colored (f"{message}", "yellow") # mensagem de alerta
    
def message_erro (message):
    return colored (f"\n‚ùå ‚ùå {message} ‚ùå ‚ùå\n", "red") # mensagem de erro

def message_success (message):
    return colored (f"{message}", "green") # mensagem de ok 
def message_default (message):
    return colored (f"{message}", "magenta") # mensagem de ok 

def menu():
    menu = """\n
    üü™üü™üü™üü™üü™üü™üü™ Menu üü™üü™üü™üü™üü™üü™üü™ 
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova Conta
    [lc]\tListar Contas
    [nu]\tNovo usu√°rio
    [q]\tsair  
    ‚ñ∂  """
    return input(colored(textwrap.dedent(menu),"magenta"))

def deposito(saldo, valor, extrato, /):
    #A fun√ß√£o de dep√≥sito deve receber valores apenas por posi√ß√£o /!
    if valor > 0:
        saldo += valor
        extrato += message_alert(f"Dep√≥sito: \t R$ {valor:.2f}\n")
        print(message_success("\n ==== üí∏ Dep√≥sito realizado com sucesso ! üí∏ ===") )
    else:
        print(message_erro("Opera√ß√£o falhou! O valor informado √© inv√°lido!"))
    return saldo, extrato

def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
    #apenas por parametros nomeados *>

    #valida√ß√µes
    valor_invalido = valor <= 0
    excedeu_saldo = valor > saldo
    excedeu_limite = valor > limite
    excedeu_saques = numero_saques >= limite_saques
    
    if excedeu_saldo:
        print( message_erro("Opera√ß√£o falhou! voc√™ n√£o tem saldo suficiente"))

    elif excedeu_saques:
        print( message_erro("Opera√ß√£o falhou! O valor do saque excedeu o limite"))

    elif excedeu_limite:
        print( message_erro("Opera√ß√£o falhou! N√∫mero m√°ximo de saques excedido"))

    elif valor_invalido:
        print( message_erro("Opera√ß√£o falhou! O valor dever√° ser maior que 0"))
        
    elif valor > 0:
        saldo -= valor
        extrato += message_alert(f"Saque: \t\t R${valor:.2f}\n")
        numero_saques = numero_saques + 1
        print(f"---------  {numero_saques}")
        print(message_success(f"\n --- Saque de {valor} realizado com sucesso! ---"))

    else:
        print( message_erro("Opera√ß√£o falhou! O valor informado inv√°lido"))

    return saldo, extrato

def exibir_extrato(saldo, /, *, extrato):
    #de forma nomeado *=>
    #de forma posicional <=/
    print(message_alert("\n--------------------EXTRATO---------------------"))
    #valida√ß√£o e exibi√ß√£o caso n√£o tenha sido movimentada a conta
    print(message_alert("N√£o foram realizadas movimenta√ß√µes.") if not extrato else extrato)
    print(message_alert(f"\nSaldo: \t\tR$ {saldo:.2f}"))
    print(message_alert("\n-------------------------------------------------"))
  

def criar_usuario(usuarios):
    cpf = input(message_alert("Informe o CPF (somente n√∫meros): "))
    usuario = filtrar_usuario (cpf, usuarios)

    if usuario:
        print(message_erro("\nJ√° existe usu√°rio com esse CPF!"))
        #se o usu√°rio exista ir√° retornar ao fluxo
        return
    nome = input(message_alert("Informe o nome completo: "))
    data_nascimento = input(message_alert("Informe a data de nascimento (dd-mm-aaaa): "))
    endereco = input(message_alert("Informe o endere√ßo (logradouro, nro - bairo - cidade/estado): "))


    #adiciona o usu√°rio como um dicion√°rio
    usuarios.append({"nome": nome, "data_nascimento": data_nascimento, "cpf": cpf, "endereco": endereco})

    print(message_success("---- Usu√°rio criado com  sucesso! ----"))


def filtrar_usuario(cpf, usuarios):
    # se tiver usu√°rio o retornar√°, se n√£o a lista ficar√° vazia
    usuarios_filtrados = [usuario for usuario in usuarios if usuario["cpf"] == cpf]
    #verifica se usuarios_filtrados tem conte√∫do, se v√£o for
    # uma lista vazia, retorna o primeiro elemento (usuario achado)
    return usuarios_filtrados[0] if usuarios_filtrados else None
    # se n√£o encontrar retorna none

def criar_conta(agencia, numero_conta, usuarios):
    if len(usuarios) < 1:
        print(message_erro("N√£o existe usu√°rios para criar conta, por favor, cadastre o usu√°rio!"))
        return
    #pede o cpf
    cpf = input(message_alert("Informe o CPF do usu√°rio: "))
    #verifica se j√° existe um usu√°rio com este cpf
    usuario = filtrar_usuario(cpf, usuarios)

    # se n√£o encontrou o usu√°rio
    if usuario:
        print(message_success("\n---- Conta criada com  sucesso! ----"))
        return {"agencia": agencia, "numero_conta": numero_conta, "usuario": usuario}
    
    # se n√£o tiver retorno, o padr√£o √© None
    print(message_erro("Usu√°rio n√£o encontradom fluxo de cria√ß√£o de conta encerrado! "))

def listar_contas (contas):
    for conta in contas:
        linha = f"""\
        Ag√™ncia:\t{conta['agencia']}
        C/c:\t\t{conta['numero_conta']}
        Titular:\t{conta['usuario']['nome']}
        """
        print("=" * 100)
        print(textwrap.dedent(linha))

def main():
    LIMITE_SAQUES = 3
    AGENCIA = "0001"
    saldo = 0
    limite = 500
    extrato = ""
    numero_saques = 0
    usuarios = []
    contas = []
    
    while True:
            opcao = menu()
            if opcao.lower() == 'd':
                try:
                  valor = float(input(message_default("Informe o valor do dedp√≥sito: ")))
                    #retorno - as vari√°veis acima tem que receber estes valores
                    # para serem mudados, refatorarei futuramente est√° parte
                  saldo, extrato = deposito (saldo, valor , extrato)
                 
                except ValueError:
                    print(message_erro("Porfavor, digite apenas n√∫meros e com valores positivos!‚Äº"))
                finally:
                    continue

            elif opcao.lower() == 's':
                try:
                    valor = float(input(message_alert("Informe o valor de saque: ")))
                    saldo, extrato = sacar(
                        saldo=saldo,
                        valor=valor, 
                        extrato=extrato,
                        limite=limite,
                        numero_saques=numero_saques,
                        limite_saques=LIMITE_SAQUES,
                    )
                    
                except ValueError:
                    print(message_erro("Porfavor, digite apenas n√∫meros e com valores positivos!‚Äº"))
                finally:
                    continue

            elif opcao.lower() == 'e':
                exibir_extrato(saldo, extrato=extrato)

            elif opcao.lower() == 'nu':
                criar_usuario(usuarios)

            elif opcao.lower() == 'nc':
                #Contas dos usu√°rio √© o tamanho da quantidade contas + 1 / para resolve
                # problemas de contas n√£o usuadas, adicionar propriedade em conta, com o valor de ativa ou n√£o
                numero_conta = len(contas) + 1
                #criando a conta
                conta = criar_conta(AGENCIA, numero_conta, usuarios)

                #se a conta foi criada, mandar conta
                if conta:
                    contas.append(conta)


            elif opcao.lower() == 'lc':
                listar_contas(contas)

            elif opcao.lower() == 'q':
                break
            else:
                print(message_erro("Opera√ß√£o inv√°lida, por favor seleciona novamente a opera√ß√£o desejada."))



main()